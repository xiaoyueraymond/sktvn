docker 简介

http://www.php.cn/code/8786.html

章节1 第一课时

【启动docker】
	sudo docker run -i -t ubuntu /bin/bash
	ls
	ps
	ifocnifg

【什么是容器】
 	一种虚拟化的方案
 	操作系统级别的虚拟化
 	只能运行相同和相似内核的操作系统
 	依赖于linux内核特行：Namespace和Cgroups(Control Group)

【linux容器技术VS虚拟机】
 	虚拟机需要几个G的系统
 	虚拟机需要模拟硬件，资源开销大

【什么是docker】
	将应用程序自动部署到容器
	GO语言编写
	2013年初  dotcloub 公司发布
	基于Apache2.0 开运授权协议

【docker目标】
	提供简单轻量的建模方式
	职责的逻辑分离
		开发人员：容器中的程序
		运维人员：管理容器
	快速高效的开发生命周期
		以容器的方式交付和分发（开发，测试，生产环境一致）
		可移植性
	面向服务的架构
		分布式模型
		一个容器运行一个应用程序或进程--高内聚低耦合单一任务


【docker使用场景】
		1.使用docker容器开发，测试，部署服务。
		2.创建隔离的运行环境
		3.搭建测试环境
		4.构建多用户的平台即服务基础设施
		5.提供软件即服务应用程序
		6.高性能，超大规模的宿主机部署

章节1  第二课时
【docker组成】
		1.Client 客户端
		2.Daemon 守护进程
		3.Image  镜像      -
		4.Container 容器
		5. Registry 仓库


【Client&Daemon】
		C/S 架构
		本地/远程

【docker image】
		容器的基石
		层叠的只读文件系统
		联合加载（union mount）


add Apache
add emacs
rootfs（Ubuntu）只读状态 --基础镜像
bootfs

【docker Container】容器
		通过镜像启动
		启动和执行阶段
		写时复制

			可写层
			add Apache
			add emacs
			rootfs（Ubuntu）只读状态 --基础镜像
			bootfs

【docker Registry仓库】
		公有 DockerHub
		私有 

docker在线地址
https://www.docker.com/tryit/


【docker 基本命令】

cat /etc/redhat-release       #查看系统版本
uanme -r     				  #查看内核版本
yum -y install docker         #yum安装docker
service docker start          #启动docker
docker version                #查看docker版本
docker run hello-world        #运行测试镜像
docker pull learn/tutorial    #从仓库拉去镜像
docker images				  #查看docker镜像
docker run learn/tutorial apt get install -y ping #给learn/tutorial 镜像安装ping工具
docker ps -l                  #查看运行中的容器
docker commit 143ea159b71e learn/ping #生成新镜像
docker images                 #查看docker镜像
docker push learn/ping        #把做好的镜像存储到远程仓库

章节1 第四课时
【docker容器技术相关】

Namespaces 命名空间
		编程语言
			封装 → 代码隔离
		操作系统
			系统资源的隔离
			进程，网络，文件系统

	Process ID                 进程隔离
	Network					   管理网络接口
	InterProcess Communication 管理跨进程通信的访问
	Mount 					   管理挂载点
	Unix Timesharing System    隔离内核和版本表示

Control groups 控制组          --谷歌工程师开发
	资源限制
	优先级设定
	资源计量
	资源控制

Docker容器的能力
	文件系统隔离：每个容器都哟自己的root文件系统
	进程隔离：每个容器都运行在自己的进程环境中
	网络隔离：容器间的虚拟网络接口和ip地址都是分开的
	资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给docker容器

章节2 docker安装
	ubuntu中安装docker
	windows中安装docker
	maxOS中安装docker

章节3  第一课时docker容器

【容器基本命令】

#一次性启动容器输出hello world
docker run learn/tutorial echo "hello world"

#启动容器
	docker run IMAGE[COMMAND][ARG]

#启动交互式容器
	docker run -i -t IMAGE /bin/bash
	-i  告诉守护进程始终打开标准输入
	-t  分配伪tty终端

[root@localhost ~]# docker run -i -t learn/tutorial /bin/bash
root@6ba97689969e:/# ps -ef 
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  2 03:38 ?        00:00:00 /bin/bash
root         9     1  0 03:38 ?        00:00:00 ps -ef
root@6ba97689969e:/# exit
exit
[root@localhost ~]# 

#查看容器
docker ps -a -l
           不加参数表示正在运行的容器
  		-a 查看存在过的所有容器
  		-l 最新创建的一个容器

[root@localhost ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
6ba97689969e        learn/tutorial      "/bin/bash"              2 minutes ago       Exited (0) 51 seconds ago                       hopeful_goldwasser
286dbbb406a1        learn/tutorial      "echo 'hello world'"     4 minutes ago       Exited (0) 4 minutes ago                        jolly_lichterman
cf02015db680        learn/tutorial      "/bin/bash"              17 minutes ago      Exited (0) 16 minutes ago                       angry_roentgen
46dcc1f08734        learn/ping          "ping www.google.com"    19 hours ago        Exited (0) 19 hours ago                         boring_jones
143ea159b71e        learn/tutorial      "apt-get install -y p"   19 hours ago        Exited (0) 19 hours ago                         mad_kilby
865a5e3c4bed        learn/tutorial      "echo 'hello docker'"    19 hours ago        Exited (0) 19 hours ago                         infallible_ptolemy
bd79d8c0ee68        hello-world         "/hello"                 19 hours ago        Exited (0) 19 hours ago                         nauseous_visvesvaraya
[root@localhost ~]# 

docker inspect +id 或者 名字
docker inspect 6ba97689969e  

#自定义容器名字
	docker run --name=zhz -i -t learn/tutorial /bin/bash
	docker inspect zhz

#重启启动停止的容器
[root@localhost ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
[root@localhost ~]# docker start zhz
zhz
[root@localhost ~]# docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
c43f403cd34f        learn/tutorial      "/bin/bash"         2 minutes ago       Up 3 seconds                            zhz
[root@localhost ~]# 


#删除停止的容器
docker rm bd79d8c0ee68 

[root@localhost ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
c43f403cd34f        learn/tutorial      "/bin/bash"              9 minutes ago       Up 7 minutes                                    zhz
6ba97689969e        learn/tutorial      "/bin/bash"              16 minutes ago      Exited (0) 14 minutes ago                       hopeful_goldwasser
286dbbb406a1        learn/tutorial      "echo 'hello world'"     18 minutes ago      Exited (0) 18 minutes ago                       jolly_lichterman
cf02015db680        learn/tutorial      "/bin/bash"              30 minutes ago      Exited (0) 30 minutes ago                       angry_roentgen
46dcc1f08734        learn/ping          "ping www.google.com"    19 hours ago        Exited (0) 19 hours ago                         boring_jones
143ea159b71e        learn/tutorial      "apt-get install -y p"   19 hours ago        Exited (0) 19 hours ago                         mad_kilby
865a5e3c4bed        learn/tutorial      "echo 'hello docker'"    19 hours ago        Exited (0) 19 hours ago                         infallible_ptolemy
bd79d8c0ee68        hello-world         "/hello"                 20 hours ago        Exited (0) 20 hours ago                         nauseous_visvesvaraya
[root@localhost ~]# docker rm bd79d8c0ee68
bd79d8c0ee68
[root@localhost ~]# docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
c43f403cd34f        learn/tutorial      "/bin/bash"              9 minutes ago       Up 7 minutes                                    zhz
6ba97689969e        learn/tutorial      "/bin/bash"              16 minutes ago      Exited (0) 14 minutes ago                       hopeful_goldwasser
286dbbb406a1        learn/tutorial      "echo 'hello world'"     18 minutes ago      Exited (0) 18 minutes ago                       jolly_lichterman
cf02015db680        learn/tutorial      "/bin/bash"              30 minutes ago      Exited (0) 30 minutes ago                       angry_roentgen
46dcc1f08734        learn/ping          "ping www.google.com"    19 hours ago        Exited (0) 19 hours ago                         boring_jones
143ea159b71e        learn/tutorial      "apt-get install -y p"   19 hours ago        Exited (0) 19 hours ago                         mad_kilby
865a5e3c4bed        learn/tutorial      "echo 'hello docker'"    19 hours ago        Exited (0) 19 hours ago                         infallible_ptolemy
[root@localhost ~]# 



章节3  第二课时守护式容器
				能够长期运行
				没有交互式会话
				非常适合应用程序和服务

已守护形式运行容器
		docker run -i -t 容器名 /bin/bash
        按ctrl + q  Ctrl + Q

附加到运行中的容器
		docker attach 容器名

启动守护式容器
		docker run -d 

docker  run -d  --name dc3 learn/tutorial /bin/sh -c "while true;do echo hello world;sleep 10;done"

查看容器日志
		docker logs [-f] [-t] [--tail] 容器名
		-f  		一直跟踪变化并返回结果
		-t  		结果返回时间搓
		--tail 		返回结尾处多少数量的日志
					无参数表示所有日志

-----------------------------------------------------
docker pull haitun/httpd-php53w
docker pull haitun/nginx-php53w
docker pull haitun/php53w
docker pull haitun/php56w
docker pull nginx-php53w
docker pull nginx-php56w
------------------------------------------------------

进入容器
 		docker exec -ti dc4 /bin/bash

cp /etc/sysconfig/docker /etc/sysconfig/docker.bak

--------------------------------------------------------
添加
OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false --insecure-registry 113.98.247.82:5000'
ADD_REGISTRY='--add-registry 113.98.247.82:5000'

--------------------------------------------------------

curl http://192.168.8.84:5000/v2/_catalog  #配置仓促源

docker pull haitun/httpd-php53w            #拉取镜像
docker pull nginx-php56w                   



