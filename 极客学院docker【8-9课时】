【数据卷容器】
	命名的容器挂载数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器就叫做数据卷容器。

----------------------------------------------------------------------
|						    Docker Host                               |
|														     	      |
|   ---------------------------------          ---------------------  |    
|   |        Docker                  |         |  Local FileSystem |  |
|   |  -----------                   |         |                   |  |
|   | |container1 | →                |         |                   |  |
|   | ------------                   |         |                   |  |
|   | ------------    -------------- |         |  ---------------  |  |
|   | |container2|  →  |Datacontainer--------------Directory/File| |  |
|   | ------------    -------------- |         | --------------- | |  |
|   | -----------                    |         |                   |  |
|   | |container3| →                 |         |                   |  |
|   | ------------                   |         |                   |  |
|   |                                |         |                   |  |                               |         |                   |  |
|    ---------------------------------          --------------------  |
|																	  |
----------------------------------------------------------------------   

【挂载数据卷容器的方法】
        1.创建Dockerfile
		#FROM <iamge>:<tag> 必须是已存在的镜像
		#第一条必须是非注释语句
		FROM dockerfile
		VOLUME [ /datavolume1 , /datavolume2 ]
		CMD /bin/bash
		#创建挂载了2个数据卷的镜像volume
		docker build -t volume .
		#以镜像volume创建容器volume2    
		docker run --name volume2 -it volume
		ls
		docker inspect volume2

		#在数据卷创建文件dvt4_1
		touch /datavolume1/dvt4_1
		ls /datavolume1
		exit

        #新容器dvt5 挂载数据卷容器volume2   
        #新容器名字dvt5 关键字--volumes-from 数据卷容器名字volume2  镜像名字ubuntu     
		docker run -it --name dvt5 --volumes-from volume2 ubuntu /bin/bash
		ls /datavolume1

		docker inspect volume2

        #此时删除数据卷容器volume2，容器dvt5依旧能访问数据卷。
        #说明数据卷容器volume2的作用只是给容器dvt5传递了一个目录。

        $ docker stop $(docker ps -a -q) //  stop停止所有容器
        $ docker  rm $(docker ps -a -q) //   remove删除所有容器

------------------------------------------------------------------------------------
        1.创建Dockerfile
		#FROM <iamge>:<tag> 必须是已存在的镜像
		#第一条必须是非注释语句
		FROM dockerfile
		VOLUME [ /datavolume1 , /datavolume2 ]
		CMD /bin/bash
		#创建挂载了2个数据卷的镜像volume
		docker build -t volume .
		#以镜像volume创建容器volume2    
		docker run --name volume2 -it volume
		cd /datavolume1
		touch 1.txt
		ls
		docker inspect volume2
		"Source": "/var/lib/docker/volumes/9dd7f6075f903664f0dffed89dafa846f0c3a88f0c032d5ab4478ed8bedfcf21/_data",
        "Destination": "/datavolume1",

        #新容器dvt5 挂载数据卷容器volume2   
        #新容器名字dvt5 关键字--volumes-from 数据卷容器名字volume2  镜像名字ubuntu     
		docker run -it --name dvt5 --volumes-from volume2 volume /bin/bash
		ls /datavolume1
		docker inspect dvt5
		"Source": "/var/lib/docker/volumes/9dd7f6075f903664f0dffed89dafa846f0c3a88f0c032d5ab4478ed8bedfcf21/_data",
        "Destination": "/datavolume1",

        docker run -it --name dvt6 --volumes-from volume2 ubuntu /bin/bash
        "Source": "/var/lib/docker/volumes/9dd7f6075f903664f0dffed89dafa846f0c3a88f0c032d5ab4478ed8bedfcf21/_data",
        "Destination": "/datavolume1",


章节8课时1【docker容器跨主机连接】

        【跨主机连接】 

						                         GateWay
				                               /         \
				                              /           \ 
				---------------------------- /             \------------------------------
				|        Docker Host1       / |            |\         Docker Host2        |
				|                          /  |            | \                            |
				|host eth0  192.168.59.103    |            |  host eth0 192.168.59.104    |
				|             |               |    (GRE)   |             |                |         
				|          obrO   <-----------------------------------> obrO              |
				|             |               |            |             |                |
				|  docker0 192.168.1.0/24     |            |       bro 192.168.2.024      |
				|       |            |        |            |        |          |          |
				|container eth0 container etho|            |container etho  container etho|
				-------------------------------             -------------------------------
         
         【步骤】

             	·建立ovs网桥
				·添加gre连接
				·配置docker容器虚拟网桥
				·为虚拟网桥添加ovs接口
				·添加不同Docker容器网段路由


         【材料准备】
				Mac OSX+Virtualbox
				两台Ubuntu14.04虚拟机
				双网卡，Host-Only &NAT
				·安装Open vSwitch：
					apt-get install openvswitch-switch

				·安装网桥管理工具：
					apt-get install bridge-utils

				·IP地址：Host1:192.168.59.103
					     Host2:192.168.59.104


-----------------------------------------------------------------------------------------------
centos7安装openvswitch虚拟交换机【https://www.cnblogs.com/xkops/p/5568167.html】

1.安装依赖软件包，及创建普通用户ovs。
yum -y install wget gcc make python-devel openssl-devel kernel-devel graphviz kernel-debug-devel autoconf automake rpm-build redhat-rpm-config libtool
adduser ovs
su - ovs

2.下载源码包，并创建rpm包。
mkdir -p ~/rpmbuild/SOURCES
wget http://openvswitch.org/releases/openvswitch-2.3.2.tar.gz
cp openvswitch-2.3.2.tar.gz ~/rpmbuild/SOURCES/
tar xfz openvswitch-2.3.2.tar.gz
sed 's/openvswitch-kmod, //g' openvswitch-2.3.2/rhel/openvswitch.spec > openvswitch-2.3.2/rhel/openvswitch_no_kmod.spec
rpmbuild -bb --nocheck openvswitch-2.3.2/rhel/openvswitch_no_kmod.spec
exit

3.创建ovs配置目录，并安装制作好的rpm包。
mkdir /etc/openvswitch
yum localinstall /home/ovs/rpmbuild/RPMS/x86_64/openvswitch-2.3.2-1.x86_64.rpm

4.如果selinux开启，请执行如下操作，如未开启，请略过此步骤。
yum install policycoreutils-python 
semanage fcontext -a -t openvswitch_rw_t "/etc/openvswitch(/.*)?" 
restorecon -Rv /etc/openvswitch

5.启动服务，并查看ovs版本信息。

chkconfig openvswitch on
systemctl restart openvswitch.service
ovs-vsctl -V
----------------------------------------------------------------------------------------------------------------

 		【给容器自定义地址】
                 自定义docker 0 ,给容器分配ip地址
                	ifconfig docker0 192.168.200.1 netmask 255.255.255.0
                	#查看docker0 地址
                	ifconfig
                	#service docker restart 
                	#* 修改文件 /etc/docker/daemon.json 添加内容 "bip": "ip/netmask" [ 切勿与宿主机同网段 ]
						---------------------------------------
								{
								"bip":"192.168.100.1/24" 
								}
						---------------------------------------
                	#跑一个容器
                	docker run -it --name ubuntu2 dc4491992653 /bin/bash
                	#查看容器地址
                	ifconfig

        【实验步骤】
        	1.[10.100.13.115配置][dcoker 192.168.200.0/24]
                #查看虚拟交换机openvswtich
        		ovs-vsctl -V
        		#创建obr0
        		ovs-vsctl add-br obr0
        		#绑定隧道
        		add-port obr0 gre0
        		#隧道设置
        		set interface gre0 type=gre options:remote_ip=10.100.13.118
        		#查看配置
        		ovs-vsctl show
        		#obr0桥接docker0设置
        		brctl addif docker0 obr0
        		#查看桥接
				brctl show
				

				#添加路由表      目的ip             下一跳         出接口
				ip route add 192.168.100.0/24 via 10.100.13.118 dev enp0s8
				删除条目
				#ip route delete 192.168.100.0/24 via 10.100.13.115 dev enp0s8

  				#查看路由表
  				route
  				---------------------------------------------------------------------------------
  				Kernel IP routing table
				Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
				default         gateway         0.0.0.0         UG    100    0        0 enp0s3
				default         gateway         0.0.0.0         UG    101    0        0 enp0s8
				10.0.2.0        0.0.0.0         255.255.255.0   U     100    0        0 enp0s3
				10.100.13.0     0.0.0.0         255.255.255.0   U     100    0        0 enp0s8
				192.168.100.0   10.100.13.118   255.255.255.0   UG    0      0        0 enp0s8
				192.168.200.0   0.0.0.0         255.255.255.0   U     0      0        0 docker0
				[root@dockersevice sysconfig]# 

  				---------------------------------------------------------------------------------
                #测试容器
                docker run -it ubunt /bin/bash
                ping 192.168.100.2

        	2.[10.100.13.118配置][dcoker 192.168.100.0/24]
        	    #安装网络工具
        	    sudo yum install net-tools -y
                #查看虚拟交换机openvswtich
        		ovs-vsctl -V
        		#创建obr0
        		ovs-vsctl add-br obr0
        		#绑定隧道
        		ovs-vsctl add-port obr0 gre0
        		#隧道设置
        		set interface gre0 type=gre options:remote_ip=10.100.13.115
        		#查看配置
        		ovs-vsctl show
        		#obr0桥接docker0设置
        		brctl addif docker0 obr0
        		#查看桥接
				brctl show
				

				#添加路由表      目的ip             下一跳         出接口
				ip route add 192.168.200.0/24 via 10.100.13.115 dev enp0s8


  				#查看路由表
  				route




