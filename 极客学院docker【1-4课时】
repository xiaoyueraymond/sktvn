docker 简介

http://www.php.cn/code/8786.html

章节1 第一课时

	【启动docker】
		sudo docker run -i -t ubuntu /bin/bash
		ls
		ps
		ifocnifg

	【什么是容器】
	 	一种虚拟化的方案
	 	操作系统级别的虚拟化
	 	只能运行相同和相似内核的操作系统
	 	依赖于linux内核特行：Namespace和Cgroups(Control Group)

	【linux容器技术VS虚拟机】
	 	虚拟机需要几个G的系统
	 	虚拟机需要模拟硬件，资源开销大

	【什么是docker】
		将应用程序自动部署到容器
		GO语言编写
		2013年初  dotcloub 公司发布
		基于Apache2.0 开运授权协议

	【docker目标】
		提供简单轻量的建模方式
		职责的逻辑分离
			开发人员：容器中的程序
			运维人员：管理容器
		快速高效的开发生命周期
			以容器的方式交付和分发（开发，测试，生产环境一致）
			可移植性
		面向服务的架构
			分布式模型
			一个容器运行一个应用程序或进程--高内聚低耦合单一任务


	【docker使用场景】
			1.使用docker容器开发，测试，部署服务。
			2.创建隔离的运行环境
			3.搭建测试环境
			4.构建多用户的平台即服务基础设施
			5.提供软件即服务应用程序
			6.高性能，超大规模的宿主机部署

章节1  第二课时
	【docker组成】
			1.Client 客户端
			2.Daemon 守护进程
			3.Image  镜像      -
			4.Container 容器
			5. Registry 仓库


	【Client&Daemon】
			C/S 架构
			本地/远程

	【docker image】
			容器的基石
			层叠的只读文件系统
			联合加载（union mount）


	add Apache
	add emacs
	rootfs（Ubuntu）只读状态 --基础镜像
	bootfs

	【docker Container】容器
			通过镜像启动
			启动和执行阶段
			写时复制

				可写层
				add Apache
				add emacs
				rootfs（Ubuntu）只读状态 --基础镜像
				bootfs

	【docker Registry仓库】
			公有 DockerHub
			私有 

	docker在线地址
	https://www.docker.com/tryit/


	【docker 基本命令】

	cat /etc/redhat-release       #查看系统版本
	uanme -r     				  #查看内核版本
	yum -y install docker         #yum安装docker
	service docker start          #启动docker
	docker version                #查看docker版本
	docker run hello-world        #运行测试镜像
	docker pull learn/tutorial    #从仓库拉去镜像
	docker images				  #查看docker镜像
	docker run learn/tutorial apt get install -y ping #给learn/tutorial 镜像安装ping工具
	docker ps -l                  #查看运行中的容器
	docker commit 143ea159b71e learn/ping #生成新镜像
	docker images                 #查看docker镜像
	docker push learn/ping        #把做好的镜像存储到远程仓库

章节1 第四课时
	【docker容器技术相关】

	【Namespaces 命名空间】
			编程语言
				封装 → 代码隔离
			操作系统
				系统资源的隔离
				进程，网络，文件系统

		Process ID                 进程隔离
		Network					   管理网络接口
		InterProcess Communication 管理跨进程通信的访问
		Mount 					   管理挂载点
		Unix Timesharing System    隔离内核和版本表示

	【Control groups 控制组】         --谷歌工程师开发
		资源限制
		优先级设定
		资源计量
		资源控制

	【Docker容器的能力】
		文件系统隔离：每个容器都哟自己的root文件系统
		进程隔离：每个容器都运行在自己的进程环境中
		网络隔离：容器间的虚拟网络接口和ip地址都是分开的
		资源隔离和分组：使用cgroups将CPU和内存之类的资源独立分配给docker容器

章节2 docker安装
	ubuntu中安装docker
	windows中安装docker
	maxOS中安装docker

章节3  第一课时docker容器

	【容器基本命令】

	【一次性启动容器输出hello world
	docker run learn/tutorial echo "hello world"

	【启动容器】
		docker run IMAGE[COMMAND][ARG]

	【启动交互式容器】
		docker run -i -t IMAGE /bin/bash
		-i  告诉守护进程始终打开标准输入
		-t  分配伪tty终端

		[root@localhost ~]# docker run -i -t learn/tutorial /bin/bash
		root@6ba97689969e:/# ps -ef 
		UID        PID  PPID  C STIME TTY          TIME CMD
		root         1     0  2 03:38 ?        00:00:00 /bin/bash
		root         9     1  0 03:38 ?        00:00:00 ps -ef
		root@6ba97689969e:/# exit
		exit
		[root@localhost ~]# 

	【查看容器】
		docker ps -a -l
		           不加参数表示正在运行的容器
		  		-a 查看存在过的所有容器
		  		-l 最新创建的一个容器

				[root@localhost ~]# docker ps -a
				CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
				6ba97689969e        learn/tutorial      "/bin/bash"              2 minutes ago       Exited (0) 51 seconds ago                       hopeful_goldwasser
				286dbbb406a1        learn/tutorial      "echo 'hello world'"     4 minutes ago       Exited (0) 4 minutes ago                        jolly_lichterman
				cf02015db680        learn/tutorial      "/bin/bash"              17 minutes ago      Exited (0) 16 minutes ago                       angry_roentgen
				46dcc1f08734        learn/ping          "ping www.google.com"    19 hours ago        Exited (0) 19 hours ago                         boring_jones
				143ea159b71e        learn/tutorial      "apt-get install -y p"   19 hours ago        Exited (0) 19 hours ago                         mad_kilby
				865a5e3c4bed        learn/tutorial      "echo 'hello docker'"    19 hours ago        Exited (0) 19 hours ago                         infallible_ptolemy
				bd79d8c0ee68        hello-world         "/hello"                 19 hours ago        Exited (0) 19 hours ago                         nauseous_visvesvaraya
				[root@localhost ~]# 

				docker inspect +id 或者 名字
				docker inspect 6ba97689969e  

	【自定义容器名字】
		docker run --name=zhz -i -t learn/tutorial /bin/bash
		docker inspect zhz

	【重启启动停止的容器】
			[root@localhost ~]# docker ps
			CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
			[root@localhost ~]# docker start zhz
			zhz
			[root@localhost ~]# docker ps
			CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
			c43f403cd34f        learn/tutorial      "/bin/bash"         2 minutes ago       Up 3 seconds                            zhz
			[root@localhost ~]# 


	【删除停止的容器】
			docker rm bd79d8c0ee68 

			[root@localhost ~]# docker ps -a
			CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
			c43f403cd34f        learn/tutorial      "/bin/bash"              9 minutes ago       Up 7 minutes                                    zhz
			6ba97689969e        learn/tutorial      "/bin/bash"              16 minutes ago      Exited (0) 14 minutes ago                       hopeful_goldwasser
			286dbbb406a1        learn/tutorial      "echo 'hello world'"     18 minutes ago      Exited (0) 18 minutes ago                       jolly_lichterman
			cf02015db680        learn/tutorial      "/bin/bash"              30 minutes ago      Exited (0) 30 minutes ago                       angry_roentgen
			46dcc1f08734        learn/ping          "ping www.google.com"    19 hours ago        Exited (0) 19 hours ago                         boring_jones
			143ea159b71e        learn/tutorial      "apt-get install -y p"   19 hours ago        Exited (0) 19 hours ago                         mad_kilby
			865a5e3c4bed        learn/tutorial      "echo 'hello docker'"    19 hours ago        Exited (0) 19 hours ago                         infallible_ptolemy
			bd79d8c0ee68        hello-world         "/hello"                 20 hours ago        Exited (0) 20 hours ago                         nauseous_visvesvaraya
			[root@localhost ~]# docker rm bd79d8c0ee68
			bd79d8c0ee68
			[root@localhost ~]# docker ps -a
			CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS               NAMES
			c43f403cd34f        learn/tutorial      "/bin/bash"              9 minutes ago       Up 7 minutes                                    zhz
			6ba97689969e        learn/tutorial      "/bin/bash"              16 minutes ago      Exited (0) 14 minutes ago                       hopeful_goldwasser
			286dbbb406a1        learn/tutorial      "echo 'hello world'"     18 minutes ago      Exited (0) 18 minutes ago                       jolly_lichterman
			cf02015db680        learn/tutorial      "/bin/bash"              30 minutes ago      Exited (0) 30 minutes ago                       angry_roentgen
			46dcc1f08734        learn/ping          "ping www.google.com"    19 hours ago        Exited (0) 19 hours ago                         boring_jones
			143ea159b71e        learn/tutorial      "apt-get install -y p"   19 hours ago        Exited (0) 19 hours ago                         mad_kilby
			865a5e3c4bed        learn/tutorial      "echo 'hello docker'"    19 hours ago        Exited (0) 19 hours ago                         infallible_ptolemy
			[root@localhost ~]# 



章节3 课时2守护式容器】
				能够长期运行
				没有交互式会话
				非常适合应用程序和服务

	【已守护形式运行容器】
			docker run -i -t 容器名 /bin/bash
	        按ctrl + q  Ctrl + Q

	【附加到运行中的容器】
			docker attach 容器名

	【启动守护式容器】
			docker run -d 
				容器将会运行在后台模式

			docker  run -d  --name dc3 learn/tutorial /bin/sh -c "while true;do echo hello world;sleep 10;done"

			查看容器日志
					docker logs [-f] [-t] [--tail] 容器名
					-f  		一直跟踪变化并返回结果
					-t  		结果返回时间搓
					--tail 		返回结尾处多少数量的日志
								无参数表示所有日志

-----------------------------------------------------
docker pull haitun/httpd-php53w
docker pull haitun/nginx-php53w
docker pull haitun/php53w
docker pull haitun/php56w
docker pull nginx-php53w
docker pull nginx-php56w
------------------------------------------------------

******************************************************************************************************************
进入容器
 		docker exec -ti dc4 /bin/bash

cp /etc/sysconfig/docker /etc/sysconfig/docker.bak

--------------------------------------------------------
添加
OPTIONS='--selinux-enabled --log-driver=journald --signature-verification=false --insecure-registry 113.98.247.82:5000'
ADD_REGISTRY='--add-registry 113.98.247.82:5000'

--------------------------------------------------------

#配置仓促源
curl http://192.168.8.84:5000/v2/_catalog  
#拉取镜像haitun/httpd-php53w
docker pull haitun/httpd-php53w      
#拉取镜像nginx-php56w    
docker pull nginx-php56w  
#修改docker时区
cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
#查看拉取的镜像
docker images
#运行镜像
docker run -t -i 113.98.247.82:5000/nginx-php56w /bin/bash
#查看所有容器
docker ps -a
#进入正在运行的容器
docker exec -i -t dc4 /bin/bash

#提交镜像到本地
docker commit -m="nginx-php56w" -a="zhangpeng" a714e99ecd1f nginx-php56w
#提交镜像到远程仓库
docker push nginx-php56w00


******************************************************************************************************************


	【在运行中的容器内启动新的进程】
		$docker exec [-d][-i][-t] 容器名 [command] [arg]
		-d
		-i
		-t



	【停止守护式容器】
		docker stop 容器名   ------------普通关机
		docker kill 容器名   ------------强制关机



章节3 第四课时【在容器中部署静态网站】



	【设置容器的端口映射】
		-P 为所有端口进行映射
			-P --publish-all true|false 默认为false
				docker run -P -i -t ubuntu/bin/bash

		-p 指定映射的端口】
			-p,--publish=[]
			containerPort 指定容器端口宿主机的端口随机映射
				docker run -p 80 -i -t ubuntu /bin/bash          
			hostPort:containerPort 宿主机和容器端口一一对应
				docker run -p 8080:80 -i -t ubuntu /bin/bash      
			ip::containerPort    指定ip和容器端口
				docker run -p 0.0.0.0:80 -i -t unbuntu /bin/bash  ip+容器端口
			ip:hostPort:containerPort  正定ip和宿主机端口和容器端口
				docker run -p 0.0.0.0:8080:80 -i -t unbuntu /bin/bash 


		步骤：1.创建映射80端口的交互式容器
			  2.安装nginx
			  3.安装文本编辑器vim
			  4.创建静态页面
			  5.修改nginx配置文件
			  6.运行nginx
			  7.验证网站访问

----------------------------------------------------------------------------------
yum和apt-get的区别
一般来说著名的linux系统基本上分两大类： 
1.RedHat系列：Redhat、Centos、Fedora等 
2.Debian系列：Debian、Ubuntu等 
RedHat 系列 
1 常见的安装包格式 rpm包,安装rpm包的命令是“rpm -参数” 
2 包管理工具 yum 
3 支持tar包 
Debian系列 
1 常见的安装包格式 deb包,安装deb包的命令是“dpkg -参数” 
2 包管理工具 apt-get 
3 支持tar包
----------------------------------------------------------------------------------
章节4 docker镜像与仓库

	【docker image】
			容器的基石
			层叠的只读文件系统
			联合加载（union mount）

				可写层
				add Apache
				add emacs
				rootfs（Ubuntu）只读状态 --基础镜像
				bootfs

		docker -info
	【查看镜像列表】
		docker images [options] [repository]
			-a --al=false
			-f fillter        过滤
			--no-trunc=false  不使用截断镜像image id
			-q,--quiet=false  只显示镜像id

	【·REPOSITORY 仓库】
		REGISTRY 仓库

    【·TAG】
    	为同样的镜像根据不同的需求打上不同的标签

     	docker images --no-trunc

	     [root@localhost docker]# docker images --no-trunc
		REPOSITORY                               TAG                 IMAGE ID                                                                  CREATED             SIZE
		113.98.247.82:5000/nginx                 latest              sha256:c6c4f6e141375a10a19ebca064c66e59d367d628eca59de19e1b3980512

	    docker images 仓库名

	    [root@localhost ~]# docker images 113.98.247.82:5000/nginx
		REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE
		113.98.247.82:5000/nginx   latest              c6c4f6e14137        23 hours ago        724.6 MB
		[root@localhost ~]# 

	【查看镜像的详细信息】
		docker inspect [options] container | image 

	 【删除镜像】
		 	docker rmi 
		 		-f.--force=false
		 		--no-prune=false

			  docker rmi ubuntu:14.04
			  docker rmi +镜像ID
			  docker rmi $(docker iamges -q)

章节4 课时2 获取和推送镜像

		【查找镜像】
			docker hub
				registry.hub.docker.con 在网页中查找


			docker search [options] term
				--automated 自动化
				--no-trunc 不截断
				-s 星级

		【拉取镜像】
			docker pull
				-a，所有

				docker pull ubuntu:14.04
            
             使用国内的仓库服务器 --registry-mirro
             	vi /etc/default/docker 末尾
             	添加 DOCKER_OPTS="--registry-mirro=http://MIRROR-ADDR"
             	sudo docker restart

		【推送镜像【http://blog.csdn.net/mr_sunrise/article/details/75146869】】
            
			填写好name,点击create即创建成功镜像仓库 
			开始上传： 
			查看需要上传的镜像

			$ docker images
			1
			登录到docker hub

			$ docker login
			1
			现在修改你的镜像文件标签，标签如果和你在hub上的不一致，你是不可能上传成功的。我的hub上标签是etanqil/test，那么我接下来把本机上的标签改成和hub上的一致。

			$ docker tag hello-world etanqil/test
			1
			现在终于可以上传到自己的hub上了。

			$ docker push etanqil/test
			1
			上传成功（因为是国外网站，可能速度比较慢，耐心等待。。。）

		【多个仓库时，如何推送到本地仓库？还是远程仓库？】

章节4 课时3 构建镜像
		

		保存对容器的修改，并再次使用
		自定义镜像的能力		以软件的形式打包并分发服务器及运行环境

	【docker commit 通过容器构建】
			-a 作者
			-m 提示信息
			-p  不暂停容器

    【测试步骤】
    	1.跑ubuntu镜像
    			docker run -it -p 80 --name cm2 dc4491992653  /bin/bash
    	2.安装nginx
    			apt-get install -y nginx
    	3.生成镜像 
    			 docker commit -a="zhenghangzhou" -m="nginx"  b8bc5c547951 ubuntu-nginx
    			                                             容器id（名字）  +  新镜像名称
    	4.查看镜像
    			[root@localhost ~]# docker images
				REPOSITORY                               TAG                 IMAGE ID            CREATED              SIZE
				ubuntu-nginx                             latest              30c507487790        About a minute ago   264 MB
        5.测试运行镜像
        		docker run -d --name web1 -p 80 ubuntu-nginx nginx -g "daemon off;" 
        		docker ps
        		curl 127.0.0.1:32770

     【使用dockerfile构建镜像】
     	 1.创建dockerfile
     	 	#First Dockerfile
     	 		FROM ubuntu:14.04
     	 		MAINTAINER dormancypress "xyrland@163.com"
     	 		RUN apt-get update
     	 		RUN apt-get install -y nginx
     	 		EXPOSE 80

     	 2.创建目录，进入目录 
	     	    #mkdir -p 参数P代表parents,表示递归创建目录
	     	 	mkdir -p dockerfile
	     	 	cd dockerfile
	     	 	vim Dockerfile
	     	 	#-t 指定镜像名字 .表示当前目录里面有Dockerfile
	     	 	docker build -t='dockerfile' . 
	     	 	#查看镜像
	     	 	docker iamges

     	 3.测试运行镜像
     	    	# -d 后台运行 --name 容器名 -p映射端口  （ubuntu-nginx）镜像名字  nginx -g "daemon off;"程序
     	    	docker run -d --name web2 -p 80 ubuntu-nginx nginx -g "daemon off;"
        		docker ps
        		curl 127.0.0.1:32770