第20天【telnet和openssh、openssh和openssl、套按字及http基础知识、http协议及httpd基础】

【第三课时】
Socket Domain（根据其所使用的地址）
  AF_INET: IPv4：
  AF_INET: IPv6
  AF_UNIX: 同意主机的不同进程之间通信时使用：

  每类套接字提高2种socket：流，数据报
  		流:可靠的传递，面向连接，无边界；
  		数据包：不可靠传递，有边界，无连接；

套接字相关系统调用：
	socket():创建套接字
	bind():绑定进程
	listen():监听
	accept():接受请求
	connet():请求连接建立
	write():建立套接字后，内核建立套接字文件，向套接字写数据。
	read():接受数据
	    send():recv():sendto():recvfrom():

http: hyper text transfer protocol 超文本传输协议
	html:编程语言，超文本标记语言
	<html>
		<head>
			<title>TITLE</title>
		</head>
		<body>
			<h1><h1>
				<p>blablabal... <a href="http://www.xyrland.com">blabla</a></p>
			<h2></h2>	
		</body>
	</html>

	CSS:Cascading Style Sheet 层叠样式表
	js: javascript  		  浏览器脚本

    MIME：Multipurpose Internet Mail Extesion 多功能因特网邮件扩展
    将图片转化为文本，传送到对端，并在对端还原成图片 

    工作机制：
    	http请求
      <method><request-url><version>------------------------起始行
                                    ------------------------空白行
      <heards>

    	http响应
      <version><status><reason-phrase>：解释状态码status
      <heards>：响应报文首部，标明资源类型

      <entity-body>：资源存在，响应报文主体

  状态码：
        1xx 纯信息
        2xx “成功”类信息 200：请求的资源存在 201 202
        3xx 重定向类的信息（301：永久重定向,302:临时从定向,304:内容没有发出改变）
        4xx 客户端错误类：404：请求文件不存在 
        5xx 服务端错误类信息：501 504 服务器内部故障

    Web资源：Web resource
    	静态资源，文件：.jpg .gif .html .txt .js .css .pm3 .avi
    	动态文件 .php .jsp

    	媒体：
    		媒体类型（MIME类型，）：majot/minor
    								text/plain 纯文本文档
    								image/jepg
    								image/gif

    URI:统一资源标识符 Uniform Resource Identifier
    					URL:Uniform Resorce Locator, 用于描述某特定资源的位置；
    					Scheme://Server_ip:port/to/resource
    						http://www.magedu.com/images/logo.jpg
    					URN:统一资源命名符 Uniform Resourceing Naming
    	
    http协议版本：
    HTTP/0.9：原型版本 GET方法
    HTTP/1.0：因为支持MINE，第一个被广泛使用的版本 PUT,POST,DELETE
    HTTP/1.1：（1）增强了缓存功能    spdy：加速浏览器获取资源速度 （2）长连接机制
    HTTP/2.0：吞噬了spdy的优势设计


【第四课时】
RFC：请求注解文档


Web服务器的主要操作（一次完整的http请求过程）：不处理动态请求 
    （1）http基于tcp，三次握手，建立连接：接受请求或者拒接请求
    （2）服务器接受请求：
          来自于网络客户端一次性资源请求

          并发访问响应模型（Web I/O）: master进程（相当于前台）
              【模型一】单进程I/O结构：多个客户端的请求进行排队，像超市结账，一次处理一个，串行响应；
              【模型二】多进程I/O结构：并行多个进程，每个进程响应一个请求；
              【模型三】复用单进程I/O结构：一个进程响应n个请求：
                  多线程模型：一个进程生成多线程，每个线程响应一个用户请求；
                  事件驱动：event-driven
                  通知主进程：是否已经完成请求，
              【模型四】复用的多线程I/O结构：启动多个进程（m），1个进程响应n个请求；---可响应 m*n 个请求；

              C10K 一万个链接并发


    （3）处理请求request报文解析，了解请求的资料：

              元数据：请求报文首部
                    <method><URL><VERSION>
                    Host：www.xyrland.com  请求的主机名称
                    Connection:

 
    （4）获取资源：
            web资源服务器，负责向客户端的请求提供静态资源/动态资源（指定路径DocRoot）

            Web服务器资源路径映射方式：
                （a）docroot 映射
                （b）alias
                （c）虚拟主机docroot
                （d）用户家目录docroot

    
    （5）构建响应报文：

            MINIE类型：
                  显示分类
                  魔法分类
                  协商分类

            URL资源重定向：
                  Web服务器构建的响应非并客户端的请求资源，而是资源另外一个访问路径：
                  404：请求的资源不存在


    （6）发送响应报文：

    （7）记录日志（用户行为分析）：

   http服务器程序：
        httpd（apache）
        nginx（有可能取代apache）
        lighttpd（德国人研发）

        应用程序服务器：
            IIS
            tomact(开源),jetty（开源）,jboss,resin
            webshpere,weblogic,oc4j

        www.netcraft.com

   httpd的安装配置和使用：
        http：apache
           a  patchy server = apache
           ASF：aoache software foundation

           httpd的特性：apache（组织）
                高度模块化设计：DSO(动态共享) core + modules
                DSO：动态共享对象 Dynamic Shared Object
                MPM：多路处理模块
                      prefork：多进程模型，每个进程响应一个请求；
                               一个多个主进程(监听套接字），负责生成多个n子进程，每个子进程进行处理一个请求；空闲时，也会预先生成多个空闲进程，随时等待请求到达；最大不会超过1024个；
                      worker：
                      event：

Client → request → Server
    URL:
Server →  response →  Client

HTTP Method
     GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECTION

HTTP Headers
      Name：value
      Host：www.mage.com
      Connection:keep-alive

Server操作
      建立连接
      接受请求
      分析请求
      请求资源
      构建响应报文
      发送响应报文
      记录日志

Server模型 MPM 多道处理模块
      perfork
      work
      event

Client：
    IE
    Firefox
    Chrome
    Opera
    Safari

Server
    Apache →httpd
    IIS
    Nginx
    lightttpd
    thttpd


应用程序服务器
      IIS
      tomcat(apache)
      Websphere(IBM,JSP，commodity)商业化产品
      Weblogic（Oracle,JSP,connodity）
      JBoss(RedHat)

































